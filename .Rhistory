# To use packages in R they must be installed on your computer. There are two ways to do this.
# (1) - From the "Packages" tab in the bottom right pane, click the "Install" button and type the package name into the dialog box.
# (2) - To install directly from the script (remember RStudio didn't always exist) use the install.packages() function:
install.packages("ggplot2")
# For comparison, we'll use the data and figure from last week - reloaded here:
unique.char <- c('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o')
group.char <- c('x','x','x','x','y','y','y','z','z','z','z','z','z','z','z')
uniqu.num <- c(0,1,1,2,3,5,8,13,21,34,55,89,144,233,377)
rep.num <- c(1,2,3,1,2,3,1,2,3,5,2,3,4,0,5)
dec.num <- c(1,2.1,3.1,1.2,2.3,3.5,1.8,2.13,3.21,5.34,2.55,3.89,4.144,0.233,5.377)
df <- as.data.frame(cbind(unique.char,group.char,uniqu.num,rep.num,dec.num))
df$uniqu.num <- as.numeric(as.character(df$uniqu.num))
df$rep.num <- as.numeric(as.character(df$rep.num))
df$dec.num <- as.numeric(as.character(df$dec.num))
add.row <- data.frame("p","z",610,4,4.610)
colnames(add.row) <- colnames(df)
df1 <- rbind(df, add.row)
row.names(df1) <- df1$unique.char
df1 <- df1[,-1]
df1
# And recreate the plot we made with the "base" R function (i.e. not from a package):
par(family = "serif")
#Then replot
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot",
cex.axis=0.8, cex.main = 0.5, cex.lab = 1.25, pch=17, col = "grey40", cex = 1.5)
# To use packages in R they must be installed on your computer. There are two ways to do this.
# (1) - From the "Packages" tab in the bottom right pane, click the "Install" button and type the package name into the dialog box.
# (2) - To install directly from the script (remember RStudio didn't always exist) use the install.packages() function:
install.packages("ggplot2")
# install.packages requires the package name to be in quotation marks.
#Next you need to tell R to "load" the package using the library() function.
#It would take too much RAM to run all of you packages all the time, so this allows you to pick and choose based on what you are doing at any point in time.
library(ggplot2)
# From the reference manual you can find the basic plotting function is ggplot():
# Let's try replotting last week's data with ggplot():
ggplot(df1, aes(x=uniqu.num, y=dec.num))
# SO...where are the data???
# Unlike base R plotting, ggplot requires EVERYTHING to be specified.
# Let's try again by adding the points, literally with a +:
ggplot(df1, aes(x=uniqu.num, y=dec.num)) +
geom_point(size=2, shape=23)
# So far this looks pretty similar to our base plot, so why go to the trouble?
# All of the additional items you can now easily add to the plot (including analyses) are the power of ggplot:
# Let's add a regression line to these data following a linear model ("lm"):
ggplot(df1, aes(x=uniqu.num, y=dec.num)) +
geom_point(size=2, shape=23) +
geom_smooth(method = lm)
# googleVis ####
# googleVis is a package that - as the name suggests - is support by Google.
# This packages uses the Google API (application programmer interface) and Java wizardry to create interactive plots.
# The majority of functions in this package will automatically open a browser window - so be prepared for that.
#First, install the package.
install.packages("googleVis")
library(googleVis)
# Because the functions are alphabetical, the example data set for Hurricane Andrew is at the top.
# It includes a mapping example - something we have not done yet so let's see what it looks like:
# This is a direct copy-paste from the reference manual to explore an example usage.
# Run the following 14 lines and a browser window should open with the result.
data(Andrew)
AndrewGeoMap <- gvisGeoMap(Andrew, locationvar='LatLong', numvar='Speed_kt',
hovervar='Category',
options=list(width=800,height=400,
region='US', dataMode='Markers'))
AndrewMap <- gvisMap(Andrew, 'LatLong' , 'Tip',
options=list(showTip=TRUE, showLine=TRUE,
enableScrollWheel=TRUE,
mapType='hybrid', useMapTypeControl=TRUE,
width=800,height=400))
AndrewTable <- gvisTable(Andrew,options=list(width=800))
# Combine the outputs into one page:
AndrewVis <- gvisMerge(AndrewGeoMap, AndrewMap)
plot(AndrewVis)
# Next is an example dataset called "Cairo" that includes an interactive calendar.
# That sounds interesting, so let's take a look with the example script:
data(Cairo)
plot(gvisCalendar(Cairo))
# The "Cats" dataset and word tree example sound like a completely different figure than we've talked about.
# Let's see what it does:
data(Cats)
plot(gvisWordTree(Cats, textvar = "Phrase"))
# Annotated Timeline ####
# This particular function caught my eye as many data in ecology are time series-based.
# First, let's run the example:
data(Stock)
A1 <- gvisAnnotatedTimeLine(Stock, datevar="Date",
numvar="Value", idvar="Device",
titlevar="Title", annotationvar="Annotation",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width="600px", height="350px")
)
plot(A1)
# This plot seems like it might be a great way to explore hydrograph (stream flow) data over time.
# But look in the console - there is a red message that this function has been updated.
# Try the new gvisAnnotationChart() function instead:
A1 <- gvisAnnotationChart(Stock, datevar="Date",
numvar="Value", idvar="Device",
titlevar="Title", annotationvar="Annotation",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width="600px", height="350px")
)
plot(A1)
# Creating a hydrograph ####
# The USGS manages flow gauges across the US that capture discharge rates every 15 minutes.
# USGS scientists have created a package called "dataRetrieval" that will pull data directly from the USGS website for analysis.
# However, the USGS published their package to GitHub instead of CRAN.
# Reading packages from GitHub requires the "devtools" package so first:
install.packages("devtools")
library(devtools)
# Then use the install_github() function to download the "dataRetrieval" package from the "USGS-R" GitHub site.
install_github("USGS-R/dataRetrieval")
# Hit an empty line in the Console to skip updates
library(dataRetrieval)
# The function we need from this package for pulling flow data is called readNWISuv():
# NWIS stands for National Water Information System
?readNWISuv
# From this, you can see the function collects data based on the USGS codes for location and date type based on a date range.
#We will look at the 2011 flood on the Susquehanna River in Sunbury compared to several months before and after the flood:
# The site code for Sunbury is "01554000".
# This line could take a minute or two depending on your internet connection speed.
sunbury_flow <- readNWISuv("01554000","00060","2011-01-01","2013-10-10")
# From this, you can see the function collects data based on the USGS codes for location and date type based on a date range.
#We will look at the 2011 flood on the Susquehanna River in Sunbury compared to several months before and after the flood:
# The site code for Sunbury is "01554000".
# This line could take a minute or two depending on your internet connection speed.
sunbury_flow <- readNWISuv("01554000","00060","2011-01-01","2013-10-10")
#This is a very large file, let's use head() to look at the format:
head(sunbury_flow)
# How big is it? We can check the length with the nrow() function:
nrow(sunbury_flow)
#We'll overwrite the original, and make it wider for clarity:
flowchart <- gvisAnnotationChart(sunbury_flow, datevar="dateTime",
numvar="X_00060_00000",
options=list(displayAnnotations=FALSE,
legendPosition='newRow',
width="900px", height="400px")
)
# Notice all I have changed is the date range in the readNWISuv() function:
sunbury_flow <- readNWISuv("01554000","00060","2011-09-01","2011-10-01")
#We'll overwrite the original, and make it wider for clarity:
flowchart <- gvisAnnotationChart(sunbury_flow, datevar="dateTime",
numvar="X_00060_00000",
options=list(displayAnnotations=FALSE,
legendPosition='newRow',
width="900px", height="400px")
)
plot(flowchart)
install.packages("learnPopGen")
library(learnPopGen)
genetic.drift(p0 = 0.1, Ne = 100, nrep = 4, time = 20, show = p, pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 100, nrep = 4, time = 20, show = "p", pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 10, nrep = 4, time = 20, show = "p", pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 20, show = "p", pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 20, show = "p", pause = 0.1)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 20, show = "p", pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 20, show = "p", pause = 0.01, ylim=(0.0,0.6))
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 20, show = "p", pause = 0.01, ylim=(0.0,1.0))
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 20, show = "p", pause = 0.01, ylim=(0,1))
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 20, show = "p", pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 50, show = "p", pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01)
plot((genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01), ylim = (0,1))
plot((genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01), ylim = c(0.0,1.0))
plot((genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01) ylim = c(0.0,1.0))
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01, ylim = c(0.0,1.0))
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01, ylim = c(0.0,0.6))
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01, ylim = c(0.0,0.5))
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01, main = "Genetic Drift")
pdf(file = "Week3/Kniss_packageplot1.pdf", width = 6, height = 6)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01)
pdf(file = "Kniss_packageplot1.pdf", width = 6, height = 6)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01)
dev.off()
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01)
genetic.drift(p0 = 0.1, Ne = 120, nrep = 4, time = 100, show = "p", pause = 0.01)
read.csv("YCOM8_publicdata.csv")
kniss_wd <- function (repo, folder=NULL) {
if(missing(folder))
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, sep = "")))}
else
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, "/", folder, sep = "")))}
}
kniss_wd(repo = "knisssj")
read.csv("YCOM8_publicdata.csv")
read.csv("Honors/YCOM8_publicdata.csv")
df <- read.csv("Honors/YCOM8_publicdata.csv")
df
df.Qs <- df[,A:CQ]
df.Qs <- df[,"F":"CQ"]
df <- read.csv("Honors/YCOM8_publicdata.csv", header = TRUE)
df
View(df)
colnames(df)
df.Qs <- df[,6:95]
df.demog <- df[,2:5]
plot(df.Qs ~ df.demog)
plot(df.Qs$consensus ~ df.demog$Income)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(0,100))
lm(df.Qs$consensus ~ df.demog$Income)
trendline <- lm(df.Qs$consensus ~ df.demog$Income)
trendline
contrend <- lm(df.Qs$consensus ~ df.demog$Income)
contrend
abline(contrend)
summary(contrend)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,70))
abline(contrend)
summary(contrend)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,80))
abline(contrend)
summary(contrend)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75))
abline(contrend)
summary(contrend)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=18, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=12, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=10, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=7, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=8, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=1, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=2, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=3, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=4, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=5, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=15, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=14, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=16, col = "red3", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=16, col = "black", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=16, col = "gray2", cex = 1.5)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=16, col = "gray2", cex = 1)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=16, col = "gray", cex = 1)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=16, col = "gray60", cex = 1)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=16, col = "gray40", cex = 1)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9, cex.main = 1.5, cex.lab = 1, pch=16, col = "gray40", cex = 1)
abline(contrend)
summary(contrend)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023", ylab = "Percent Belief in Scientific Consensus", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9,
cex.main = 1.5, cex.lab = 1, pch=16, col = "gray40", cex = 1)
abline(contrend)
summary(contrend)
plot(df.Qs$consensus ~ df.demog$Income, ylim = c(40,75), xlab = "Personal Income in 2023 ($)", ylab = "Percent Belief in Scientific Consensus in 2024 (%)", main = "Personal Income vs. Consensus Belief By State", cex.axis=0.9,
cex.main = 1.5, cex.lab = 1, pch=16, col = "gray40", cex = 1)
abline(contrend)
summary(contrend)
littrend <- lm(df.Qs$consensus ~ df.demog$Avg.Literacy.Score)
littrend
plot(df.Qs$consensus ~ df.demog$Avg.Literacy.Score, ylim = c(40,75), xlab = "Average Literacy Score", ylab = "Percent Belief in Scientific Consensus (%)", main = "Average Literacy Score vs. Consensus Belief By State in 2024", cex.axis=0.9,
cex.main = 1.5, cex.lab = 1, pch=16, col = "gray40", cex = 1)
abline(littrend)
summary(littrend)
BStrend <- lm(df.Qs$consensus ~ df.demog$Attained.BS.or.higher)
BStrend
plot(df.Qs$consensus ~ df.demog$Attained.BS.or.higher, ylim = c(40,75), xlab = "Attained a BS Degree or Higher in 2023 (%)", ylab = "Percent Belief in Scientific Consensus in 2024 (%)", main = "Degree Attained vs. Consensus Belief By State", cex.axis=0.9,
cex.main = 1.5, cex.lab = 1, pch=16, col = "gray40", cex = 1)
abline(BStrend)
summary(BStrend)
poptrend <- lm(df.Qs$consensus ~ df.demog$population)
poptrend
plot(df.Qs$consensus ~ df.demog$population, ylim = c(40,75), xlab = "Population (# of people)", ylab = "Percent Belief in Scientific Consensus (%)", main = "Population vs. Consensus Belief By State in 2024", cex.axis=0.9,
cex.main = 1.5, cex.lab = 1, pch=16, col = "gray40", cex = 1)
abline(poptrend)
summary(poptrend)
poptoplot <- subset(df, df$population<100000000)
poptrend <- lm(df.Qs$consensus ~ poptoplot$population)
poptoplot
