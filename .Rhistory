# Decreasing the breaks to 3 kept the same pattern, so let's try increasing them to 8:
hist(df1$dec.num, breaks = 8)
# To take a closer look let's change the number of 'breaks' or bars created by the plot:
hist(df1$dec.num, breaks = 3)
# Decreasing the breaks to 3 kept the same pattern, so let's try increasing them to 8:
hist(df1$dec.num, breaks = 8)
# Boxplots ####
# What if you want to look at distributions for multiple columns at once to compare?
# This is where box plots can be very useful for comparing value ranges with the simple boxplot() function.
boxplot(df1)
#So let's remove the character column. Remember how to use brackets:
boxplot(df1[,2:4])
# Let's just look at the last two (lower value) columns now.
boxplot(df1[,3:4])
# Since the unique.num column contains much larger values let's look at it separately in it's own boxplot.
boxplot(df1$uniqu.num)
# The circles in this box plot represent outliers. These are values outside 1.5 times the interquartile range.
# Also notice this box plot looks "squished" toward the lower values. Let's see how it looks as a histogram.
hist(df1$uniqu.num)
# Bar plots ####
# Bar plots are similar to box plots in that they can be used to compare columns or vectors.
# The key difference is that bar plots compare summary statistics (such as mean and standard deviation) rather than the distribution of all values.
# This can be useful when several vectors and/or values grouped by factors are involved, in order to simplify the visual.
# We will continue working with our data frame, but group values by the 'x', 'y', and 'z' factor levels of the group.char column.
# Because we are grouping one column by the factors in another column we'll use the aggregate() function.
# First, take a look at the help documentation for aggregate() this is a powerful function we will use for other purposes later in the semester:
?aggregate
# Now let's generate means for each group based on the factor value for the $rep.num column.
# We will also specify the function to be applied is generating mean() values with the "FUN" argument:
df.mean <- aggregate(df1$rep.num ~df1$group.char, FUN = "mean")
df.mean
# Having $ symbols inside of column names can get messy fast, so we will rename these before continuing:
colnames(df.mean) <- c("Factor","Mean")
df.mean
#Now we can plot the mean values by factor:
barplot(df.mean$Mean)
# We are missing an x-axis. This can be specified with the "names.arg" argument within the barplot() function:
barplot(df.mean$Mean, names.arg = df.mean$Factor)
# These mean values appear to follow a gradient increasing as we sing the end of our "A,B,C's".
# It would be useful to know how variable the values behind these means are. So let's add error bars to the plot.
# First we need to use the 'FUN' argument to call the standard deviation, or sd(), function:
df.sd <- aggregate(df1$rep.num ~df1$group.char, FUN = "sd")
# And add column names:
colnames(df.sd) <- c("Factor","StanDev")
df.sd
# Certain plotting functions in R can be layered on top of one another as long as an object from the plot() function has been created first.
# So to add error bars to our existing plot we will use the arrows() function.
# First we need to create a plot object in R:
b.plot <- barplot(df.mean$Mean, names.arg = df.mean$Factor)
arrows(b.plot, df.mean$Mean-df.sd$StanDev,
b.plot, df.mean$Mean+df.sd$StanDev,angle=90,code=3)
# Great! We have a plot with error bars...with one small problem. What happened to the top 'z' error bar?
# Remember that arrows are drawn on top of the plot, not as part of it. So they are only drawn where they 'fit' the plotting screen.
# To make the original plot larger to accommodate the error bars we need to expand the range of the y-axis with the 'ylim' argument.
# Notice the ylim must be a range - it's not just a maximum or minimum value:
b.plot <- barplot(df.mean$Mean, names.arg = df.mean$Factor, ylim = c(0,5))
# Then redraw the error bars:
arrows(b.plot, df.mean$Mean-df.sd$StanDev,
b.plot, df.mean$Mean+df.sd$StanDev,angle=90,code=3)
# There might be times when you will want to display your barplot sideways (e.g. in order to rank means by largest to smallest) for a different visual.
# This can be done through the addition of one very simply argument to the plot - "horiz = TRUE":
barplot(df.mean$Mean, names.arg = df.mean$Factor, ylim = c(0,5), horiz = TRUE)
plot(df1$dec.num ~ df1$rep.num)
plot(df1$dec.num ~ df1$uniqu.num)
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response")
# It is not always needed, but in this case let's add a title too with the "main" argument:
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot")
# What if we want the font sizes to be smaller or larger? That can be changed with variations on the "cex" argument.
# This is one of the unintuitive arguments in R with no reasonable way to remember it.
# cex.axis will change the size of the numbers
# cex.lab will change the size of the text in xlab and ylab
# cex.main will change the size of the main title.
# All cex values are specified based on a proportion of the default. So if you want the text twice as large then cex = 2.
# Let's start with something modest - I want the numbers to be 80% of the default size:
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot", cex.axis=0.8)
# I'm also going to just crop the title off later, so it can be much smaller:
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot", cex.axis=0.8, cex.main = 0.5)
# And I want the axis labels to be just 25% larger:
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot", cex.axis=0.8, cex.main = 0.5, cex.lab = 1.25)
#I've decided my plot will be on a poster where the points need to be visible from far away.
# Open circles won't do, so let's use the 'pch' argument to fill them in:
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot",
cex.axis=0.8, cex.main = 0.5, cex.lab = 1.25, pch=19)
#pch is another argument with no logical origin. To determine which mystery number corresponds to the shape you want use the help file:
?pch
#After looking at the symbol options I think I'm going to use a filled triangle instead:
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot",
cex.axis=0.8, cex.main = 0.5, cex.lab = 1.25, pch=17)
# I'm also going to change the color. I'm going to pretend the data represent dandilions so the color "goldenrod" seems appropriate:
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot",
cex.axis=0.8, cex.main = 0.5, cex.lab = 1.25, pch=17, col = "goldenrod")
# Nevermind! That clearly is not a color that will be obvious from across the room.
#It might be boring, but at least a dark shade of grey will be visible:
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot",
cex.axis=0.8, cex.main = 0.5, cex.lab = 1.25, pch=17, col = "grey40")
# You can also find the names of all 657 generic colors by using the colors() function:
colors()
# OR by using the demo() function view all of the colors.
# To move through the color plots you must move the active cursor to the console window below and hit "enter":
demo("colors")
# It would probably help to make the points a little bigger. For this we go back to 'cex' and use the "global" version.
# Since we have already specified the size of all fonts, this will only effect the points in the plot:
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot",
cex.axis=0.8, cex.main = 0.5, cex.lab = 1.25, pch=17, col = "grey40", cex = 1.5)
# With our points, font size, labels, and colors all set, let's change the font family to something a little more professional.
# This is done outside of the plot() function by setting the parameters of our working environment with the parameter "par()" function.
# The par() function can do many things for us. Right now we will just focus on changing the font family. For more on par() check out the help file:
?par
# Because the par() function changes settings of our R 'environment' we need to re-create the plot once the default settings are changed:
# First change the font:
par(family = "mono")
#Then replot
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot",
cex.axis=0.8, cex.main = 0.5, cex.lab = 1.25, pch=17, col = "grey40", cex = 1.5)
# OK, this suddenly looks a little too much like it was created on that typewriter you found in your grandparent's basement.
# Try the "serif" family. Always a safe bet in my book:
par(family = "serif")
#Then replot
plot(df1$dec.num ~ df1$uniqu.num, xlab = "Explanatory", ylab = "Response", main = "My Favorite Scatter Plot",
cex.axis=0.8, cex.main = 0.5, cex.lab = 1.25, pch=17, col = "grey40", cex = 1.5)
kniss_wd <- function (repo, folder=NULL) {
if(missing(folder))
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub/knisssj/Week2")} else ("for Linux run: setwd('/home/sjk2004-2045/GitHub')")
},"/",repo, sep = "")))}
else
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub/knisssj/Week2")} else ("for Linux run: setwd('/home/sjk2004-2045/GitHub')")
},"/",repo, "/", folder, sep = "")))}
}
kniss_wd(repo = "knisssj", folder = "code")
kniss_wd <- function (repo, folder=NULL) {
if(missing(folder))
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub/knisssj/Week2")} else ("for Linux run: setwd('/home/sjk2004-2045/GitHub')")
},"/",repo, sep = "")))}
else
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub/knisssj/Week2")} else ("for Linux run: setwd('/home/sjk2004-2045/GitHub')")
},"/",repo, "/", folder, sep = "")))}
}
kniss_wd(repo = "knisssj")
kniss_wd <- function (repo, folder=NULL) {
if(missing(folder))
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, sep = "")))}
else
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, "/", folder, sep = "")))}
}
kniss_wd(repo = "knisssj")
cv1 <- c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o")
cv1
cv2 <- c("a","a","a","a","a","b","b","b","b","b","c","c","c","c","c")
cv2
nv1 <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
nv1
nv2 <- c(1,1,2,2,3,3,4,4,5,5,6,6,6,6,6)
nv2
nv3 <- c(1,1.1,1.2,3,4,5,6.7,7.23,8,10,11.1,13,14,14.23,15)
nv3
datask <- cbind(cv1,cv2,nv1,nv2,nv3)
datask
dfsk <- as.data.frame(datask)
dfsk
colnames(dfsk) <- c("Letter","Repeats","Number","Category","Value")
dfsk
row.names(dfsk) <- dfsk$Letter
dfsk
dfsk.a <- dfsk[,-1]
dfsk.a
p <- data.frame("c",16,6,15.22)
p
colnames(p) <- colnames(dfsk.a)
dfsk.r <- rbind(dfsk.a, p)
dfsk.r
row.names(dfsk.r) <- c(row.names(dfsk.a[1:15,]),"p")
dfsk.r
df.mean <- aggregate(dfsk.r$nv2 ~dfsk.r$nv3, FUN = "mean")
df.mean
dfsk.r$nv1.num <- as.numeric(as.character(dfsk.r$nv1.num))
dfsk.r$nv2.num <- as.numeric(as.character(dfsk.r$nv2.num))
dfsk.r$nv1 <- as.numeric(as.character(dfsk.r$nv1))
dfsk.r$nv1 <- as.numeric(as.character(dfsk.r$nv1))
cv1 <- c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o")
cv1
cv2 <- c("a","a","a","a","a","b","b","b","b","b","c","c","c","c","c")
cv2
nv1 <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
nv1
nv2 <- c(1,1,2,2,3,3,4,4,5,5,6,6,6,6,6)
nv2
nv3 <- c(1,1.1,1.2,3,4,5,6.7,7.23,8,10,11.1,13,14,14.23,15)
nv3
datask <- cbind(cv1,cv2,nv1,nv2,nv3)
datask
dfsk <- as.data.frame(datask)
dfsk
colnames(dfsk) <- c("Letter","Repeats","Number","Category","Value")
dfsk
row.names(dfsk) <- dfsk$Letter
dfsk
dfsk.a <- dfsk[,-1]
dfsk.a
dfsk.r$nv1 <- as.numeric(as.character(dfsk.r$nv1))
row.names(dfsk.r) <- dfsk.r$cv1
dfsk.r <- dfsk.r[,-1]
dfsk.r
dfsk.a <- dfsk[,-1]
dfsk.a
dfsk.r$nv1 <- as.numeric(as.character(dfsk.r$nv1))
dfsk.r$nv2 <- as.numeric(as.character(dfsk.r$nv2))
dfsk.r$nv3 <- as.numeric(as.character(dfsk.r$nv3))
p <- data.frame("c",16,6,15.22)
p
colnames(p) <- colnames(dfsk.a)
dfsk.r <- rbind(dfsk.a, p)
dfsk.r
row.names(dfsk.r) <- c(row.names(dfsk.a[1:15,]),"p")
dfsk.r
row.names(dfsk.r) <- dfsk.r$cv1
dfsk.r <- dfsk.r[,-1]
dfsk.r
df.mean <- aggregate(dfsk.r$nv2 ~dfsk.r$nv3, FUN = "mean")
df.mean
dfsk.a$nv1 <- as.numeric(as.character(dfsk.a$nv1))
dfsk.a$nv2 <- as.numeric(as.character(dfsk.a$nv2))
dfsk.a$nv3 <- as.numeric(as.character(dfsk.a$nv3))
p <- data.frame("c",16,6,15.22)
p
colnames(p) <- colnames(dfsk.a)
dfsk.r <- rbind(dfsk.a, p)
dfsk.r
row.names(dfsk.r) <- c(row.names(dfsk.a[1:15,]),"p")
dfsk.r
row.names(dfsk.r) <- dfsk.r$cv1
dfsk.r <- dfsk.r[,-1]
dfsk.r
df.mean <- aggregate(dfsk.r$nv2 ~dfsk.r$nv3, FUN = "mean")
df.mean
df.mean <- aggregate(dfsk.r$nv2 ~dfsk.r$nv3, FUN = "mean")
df.mean
colnames(df.mean) <- c("Factor","Mean")
df.mean
barplot(df.mean$Mean)
barplot(df.mean$Mean, names.arg = df.mean$Factor)
dfsk.a$nv1 <- as.numeric(as.character(dfsk.a$nv1))
kniss_wd <- function (repo, folder=NULL) {
if(missing(folder))
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, sep = "")))}
else
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, "/", folder, sep = "")))}
}
kniss_wd(repo = "knisssj")
# With the data frame you created last week you will:
# Create a barplot for one numeric column, grouped by the character vector with 3 unique values (10 points)
# Add error bars with mean and standard deviation to the plot
# Change the x and y labels and add a title
# Export the plot as a PDF that is 4 inches wide and 7 inches tall.
# Create a scatter plot between two of your numeric columns. (10 points)
# Change the point shape and color to something NOT used in the example.
# Change the x and y labels and add a title
# Export the plot as a JPEG by using the "Export" button in the plotting pane.
# Upload both plots with the script used to create them to GitHub. (5 points)
# Follow the same file naming format as last week for the script.
# Name plots as Lastname_barplot or Lastname_scatterplot. Save them to your "plots" folder. (5 points)
cv1 <- c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o")
cv1
cv2 <- c("a","a","a","a","a","b","b","b","b","b","c","c","c","c","c")
cv2
nv1 <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
nv1
nv2 <- c(1,1,2,2,3,3,4,4,5,5,6,6,6,6,6)
nv2
nv3 <- c(1,1.1,1.2,3,4,5,6.7,7.23,8,10,11.1,13,14,14.23,15)
nv3
datask <- cbind(cv1,cv2,nv1,nv2,nv3)
datask
dfsk <- as.data.frame(datask)
dfsk
colnames(dfsk) <- c("Letter","Repeats","Number","Category","Value")
dfsk
row.names(dfsk) <- dfsk$Letter
dfsk
dfsk.a <- dfsk[,-1]
dfsk.a
dfsk.a$nv1 <- as.numeric(as.character(dfsk.a$nv1))
kniss_wd(repo = "knisssj")
cv1 <- c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o")
cv1
cv2 <- c("a","a","a","a","a","b","b","b","b","b","c","c","c","c","c")
cv2
nv1 <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
nv1
nv2 <- c(1,1,2,2,3,3,4,4,5,5,6,6,6,6,6)
nv2
nv3 <- c(1,1.1,1.2,3,4,5,6.7,7.23,8,10,11.1,13,14,14.23,15)
nv3
datask <- cbind(cv1,cv2,nv1,nv2,nv3)
datask
dfsk <- as.data.frame(datask)
dfsk
colnames(dfsk) <- c("Letter","Repeats","Number","Category","Value")
dfsk
row.names(dfsk) <- dfsk$Letter
dfsk
dfsk.a <- dfsk[,-1]
dfsk.a
dfsk.a$nv1 <- as.numeric(as.character(dfsk.a$nv1))
dfsk.a
dfsk.a
dfsk.a$Number <- as.numeric(as.character(dfsk.a$Number))
dfsk.a$Category <- as.numeric(as.character(dfsk.a$Category))
dfsk.a$Value <- as.numeric(as.character(dfsk.a$Value))
p <- data.frame("c",16,6,15.22)
p
colnames(p) <- colnames(dfsk.a)
dfsk.r <- rbind(dfsk.a, p)
dfsk.r
row.names(dfsk.r) <- c(row.names(dfsk.a[1:15,]),"p")
dfsk.r
row.names(dfsk.r) <- dfsk.r$cv1
dfsk.r <- dfsk.r[,-1]
dfsk.r
df.mean <- aggregate(dfsk.r$nv2 ~dfsk.r$nv3, FUN = "mean")
df.mean
df.mean <- aggregate(dfsk.r$Category ~dfsk.r$Value, FUN = "mean")
df.mean
dfsk.r
df.mean <- aggregate(dfsk.r$Category ~dfsk.r$Value, FUN = "mean")
df.mean
colnames(df.mean) <- c("Factor","Mean")
df.mean
barplot(df.mean$Mean, names.arg = df.mean$Factor)
arrows(barplot, df.mean$Mean-df.sd$StanDev,
barplot, df.mean$Mean+df.sd$StanDev,angle=90,code=3)
df.sd <- aggregate(df1$Category ~df1$Value, FUN = "sd")
df.sd <- aggregate(dfsk.r$Category ~df1$Value, FUN = "sd")
df.sd <- aggregate(dfsk.r$Category ~dfsk.r$Value, FUN = "sd")
colnames(df.sd) <- c("Factor","StanDev")
df.sd
barplot(df.mean$Mean, names.arg = df.mean$Factor)
arrows(barplot, df.mean$Mean-df.sd$StanDev,
barplot, df.mean$Mean+df.sd$StanDev,angle=90,code=3)
b.plot <- barplot(df.mean$Mean, names.arg = df.mean$Factor)
barplot(df.mean$Mean, names.arg = df.mean$Factor)
arrows(b.plot, df.mean$Mean-df.sd$StanDev,
b.plot, df.mean$Mean+df.sd$StanDev,angle=90,code=3)
arrows(b.plot, df.mean$Mean-df.sd$StanDev,
b.plot, df.mean$Mean+df.sd$StanDev,angle=90,code=3)
df.sd
barplot(df.mean$Mean, names.arg = df.mean$Factor)
df.sd <- aggregate(dfsk.r$Category ~dfsk.r$Value, FUN = "sd")
colnames(df.sd) <- c("Factor","StanDev")
df.sd
df.sd <- aggregate(dfsk.r$Repeats ~dfsk.r$Category, FUN = "sd")
df.sd <- aggregate(dfsk.r$Category ~dfsk.r$Repeats, FUN = "sd")
df.sd <- aggregate(dfsk.r$Category ~dfsk.a$Repeats, FUN = "sd")
colnames(df.sd) <- c("Factor","StanDev")
df.mean <- aggregate(dfsk.r$Category ~dfsk.r$Repeats, FUN = "mean")
df.mean
df.mean <- aggregate(dfsk.r$Category ~dfsk.r$Repeats, FUN = "mean")
df.mean <- aggregate(dfsk.r$Category ~dfsk.r$Value, FUN = "mean")
df.mean
cv1 <- c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o") #Letter
kniss_wd(repo = "knisssj")
cv1 <- c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o") #Letter
cv1
cv2 <- c("a","a","a","a","a","b","b","b","b","b","c","c","c","c","c") #Repeats
cv2
nv1 <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15) #Number
nv1
nv2 <- c(1,1,2,2,3,3,4,4,5,5,6,6,6,6,6) #Category
nv2
nv3 <- c(1,1.1,1.2,3,4,5,6.7,7.23,8,10,11.1,13,14,14.23,15) #Value
nv3
datask <- cbind(cv1,cv2,nv1,nv2,nv3)
datask
dfsk <- as.data.frame(datask)
dfsk
colnames(dfsk) <- c("Letter","Repeats","Number","Category","Value")
dfsk
row.names(dfsk) <- dfsk$Letter
dfsk
dfsk$Number <- as.numeric(as.character(dfsk$Number))
dfsk$Category <- as.numeric(as.character(dfsk$Category))
dfsk$Value <- as.numeric(as.character(dfsk$Value))
p <- data.frame("c",16,6,15.22)
p
colnames(p) <- colnames(dfsk)
dfsk.r <- rbind(dfsk, p)
dfsk.r
row.names(dfsk.r) <- c(row.names(dfsk[1:15,]),"p")
dfsk.r
row.names(dfsk.r) <- dfsk.r$cv1
dfsk.r
row.names(dfsk.r) <- dfsk.r$cv1
dfsk.r
kniss_wd <- function (repo, folder=NULL) {
if(missing(folder))
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, sep = "")))}
else
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, "/", folder, sep = "")))}
}
kniss_wd(repo = "knisssj")
cv1 <- c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o") #Letter
cv1
cv2 <- c("a","a","a","a","a","b","b","b","b","b","c","c","c","c","c") #Repeats
cv2
nv1 <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15) #Number
nv1
nv2 <- c(1,1,2,2,3,3,4,4,5,5,6,6,6,6,6) #Category
nv2
nv3 <- c(1,1.1,1.2,3,4,5,6.7,7.23,8,10,11.1,13,14,14.23,15) #Value
nv3
datask <- cbind(cv1,cv2,nv1,nv2,nv3)
datask
dfsk <- as.data.frame(datask)
dfsk
colnames(dfsk) <- c("Letter","Repeats","Number","Category","Value")
dfsk
row.names(dfsk) <- dfsk$Letter
dfsk
dfsk$Number <- as.numeric(as.character(dfsk$Number))
dfsk$Category <- as.numeric(as.character(dfsk$Category))
dfsk$Value <- as.numeric(as.character(dfsk$Value))
p <- data.frame("c",16,6,15.22)
p
colnames(p) <- colnames(dfsk)
dfsk.r <- rbind(dfsk, p)
kniss_wd <- function (repo, folder=NULL) {
if(missing(folder))
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub/knisssj/Week2")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, sep = "")))}
else
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub/knisssj/Week2")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, "/", folder, sep = "")))}
}
kniss_wd(repo = "knisssj")
kniss_wd <- function (repo, folder=NULL) {
if(missing(folder))
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, sep = "")))}
else
{
setwd(print(paste(if (Sys.info()[["sysname"]]=="Windows") {("C:/GitHub")} else {
if (Sys.info()[["sysname"]]=="Darwin"){("/Users/sylviakniss/Documents/GitHub")} else ("for Linux run: setwd('/home/[INSERT YOUR USERNAME]/GitHub')")
},"/",repo, "/", folder, sep = "")))}
}
kniss_wd(repo = "knisssj")
row.names(dfsk.r) <- c(row.names(dfsk[1:15,]),"p")
dfsk.r
cv1
cv2 <- c("a","a","a","a","a","b","b","b","b","b","c","c","c","c","c") #Repeats
cv2
cv1 <- c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o") #Letter
cv1
cv2 <- c("a","a","a","a","a","b","b","b","b","b","c","c","c","c","c") #Repeats
cv2
nv1 <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15) #Number
nv1
nv2 <- c(1,1,2,2,3,3,4,4,5,5,6,6,6,6,6) #Category
nv2
nv3 <- c(1,1.1,1.2,3,4,5,6.7,7.23,8,10,11.1,13,14,14.23,15) #Value
nv3
datask <- cbind(cv1,cv2,nv1,nv2,nv3)
datask
dfsk <- as.data.frame(datask)
dfsk
colnames(dfsk) <- c("Letter","Repeats","Number","Category","Value")
dfsk
row.names(dfsk) <- dfsk$Letter
dfsk
dfsk$Number <- as.numeric(as.character(dfsk$Number))
dfsk$Category <- as.numeric(as.character(dfsk$Category))
dfsk$Value <- as.numeric(as.character(dfsk$Value))
p <- data.frame("c",16,6,15.22)
p
colnames(p) <- colnames(dfsk)
colnames(p) <- colnames(dfsk)
p <- data.frame("c",16,6,15.22)
p
colnames(p) <- colnames(dfsk.a)
dfsk.r <- rbind(dfsk.a, p)
dfsk.r
colnames(p) <- colnames(dfsk)
